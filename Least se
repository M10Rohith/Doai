

# Step 1: Data Preparation
import numpy as np
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split

# Load the Boston Housing dataset
boston = fetch_openml(data_id=531)

X = boston.data
y = boston.target

print(X)
print(y)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Convert pandas DataFrames and Series to NumPy arrays
X_train = X_train.values
X_test = X_test.values
y_train = y_train.values
y_test = y_test.values


# Step 2: Model Selection and Training
from sklearn.linear_model import LinearRegression

# Initialize and train the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 3: Model Evaluation
from sklearn.metrics import mean_squared_error, r2_score

# Predict on the testing set
y_pred = model.predict(X_test)

# Calculate mean squared error
mse = mean_squared_error(y_test, y_pred)

# Calculate the least mean squared error achieved by the model
lmse = np.min(mse)

print("Mean Squared Error:", mse)
print("Least Mean Squared Error:", lmse)

r2 = r2_score(y_test, y_pred)
print("R-squared:", r2)

# Step 4: Generalization Check
# Evaluate model performance on training data
y_train_pred = model.predict(X_train)
train_mse = mean_squared_error(y_train, y_train_pred)
train_r2 = r2_score(y_train, y_train_pred)

print("Least Mean Squared Error:", train_mse)
print("Training R-squared:", train_r2)


Name: MEDV, Length: 506, dtype: float64
Mean Squared Error: 24.291119474973478
Least Mean Squared Error: 24.291119474973478
R-squared: 0.6687594935356326
Least Mean Squared Error: 21.641412753226312
Training R-squared: 0.7508856358979673


     
